{"version":3,"file":"index.umd.js","sources":["../src/formatToTimeZone.js","../src/convertToLocalTime.js","../src/convertToTimeZone.js","../src/parseFromString.js","../src/parseFromTimeZone.js"],"sourcesContent":["/** @module date-fns */\n\nimport parseDate from 'date-fns/parse'\nimport formatDate from 'date-fns/format'\nimport { findTimeZone, getUTCOffset } from 'timezone-support'\n\n/**\n * @category Common Helpers\n * @summary Format the date in the specified time zone.\n *\n * @description\n * Returns the formatted date string in the given format, after converting it to the given time zone.\n *\n * The input date will be converted to the given time zone by default, using its UTC timestamp.\n * If the local time in the input date is already in the given time zone, set `options.convertTimeZone`\n * to `false`. Otherwise the date will be considered in local time and converted.\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * The following tokens are recognized in the format string:\n *\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone abbreviation   | z     | CET, CEST, EST, EDT, ...         |\n * | Timezone offset to UTC  | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} argument - the original date\n * @param {String} formatString - the string of formatting tokens\n * @param {Object} options - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @param {String} options.timeZone - the canonical name of the target time zone\n * @param {String} [options.convertTimeZone=true] - if the date should be converted to the given time zone before formatting\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent midnight on 11 February 2014, UTC in middle-endian format, New York time:\n * var result = formatToTimeZone(\n *   new Date(Date.UTC(2014, 1, 11)),\n *   'MM/dd/yyyy h:mm A [GMT]Z (z)',\n *   { timeZone: 'America/New_York' }\n * )\n * // Returns '02/10/2014 7:00 PM GMT-0500 (EST)'\n *\n * @example\n * // Represent noon on 2 July 2014 in Esperanto, Madrid time:\n * var locale = require('date-fns/locale/eo')\n * var result = formatToTimeZone(\n *   new Date(2014, 6, 2, 12),\n *   \"HH:mm, do 'de' MMMM yyyy (Zz)\",\n *   { locale, timeZone: 'Europe/Madrid', convertTimeZone: false }\n * )\n * // Returns '12:00, 2-a de julio 2014 (+02:00 CEST)'\n */\nfunction formatToTimeZone (argument, formatString, options) {\n  let date = parseDate(argument)\n  let { timeZone, convertTimeZone } = options\n  timeZone = findTimeZone(timeZone)\n  timeZone = getUTCOffset(date, timeZone)\n  if (convertTimeZone !== false) {\n    const offset = timeZone.offset - date.getTimezoneOffset()\n    date = new Date(date.getTime() - offset * 60 * 1000)\n  }\n  formatString = formatTimeZoneTokens(formatString, timeZone)\n  return formatDate(date, formatString, options)\n}\n\nfunction padToTwoDigits (number) {\n  return number > 9 ? number : `0${number}`\n}\n\nfunction formatTimeZoneOffset (offset, separator) {\n  let sign\n  if (offset <= 0) {\n    offset = -offset\n    sign = '+'\n  } else {\n    sign = '-'\n  }\n  const hours = padToTwoDigits(Math.floor(offset / 60))\n  const minutes = padToTwoDigits(offset % 60)\n  return sign + hours + separator + minutes\n}\n\nfunction formatTimeZoneTokens (format, timeZone) {\n  return format.replace(/z|ZZ?/g, match => {\n    switch (match) {\n      case 'z':\n        return `[${timeZone.abbreviation}]`\n      case 'Z':\n        return formatTimeZoneOffset(timeZone.offset, ':')\n      default: // 'ZZ'\n        return formatTimeZoneOffset(timeZone.offset, '')\n    }\n  })\n}\n\nexport { formatToTimeZone }\n","/** @module date-fns */\n\nimport parse from 'date-fns/parse'\nimport { findTimeZone, getUTCOffset } from 'timezone-support'\n\n/**\n * @category Common Helpers\n * @summary Convert the date from the given time zone to the local time.\n *\n * @description\n * Converts the given date from the given time zone to the local time and returns it as a new `Date` object.\n * Getters for local time parts of the input `Date` object (getFullYear, getMonth, ...) will be assumed to\n * return time in the given time zone.\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} options - the object with options\n * @param {String} options.timeZone - the canonical name of the source time zone\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert the time in the New York time zone to the local time:\n * const date = new Date(2018, 8, 2, 10, 0)\n * const result = convertToLocalTime(date, { timeZone: 'America/New_York' })\n * // Returns { date: Date, zone: { abbreviation: 'EDT', offset: -360 }\n * // The date will be \"2018-09-02T16:00:00Z\".\n */\nfunction convertToLocalTime (argument, options) {\n  let date = parse(argument)\n  const timeZone = findTimeZone(options.timeZone)\n  let { offset } = getUTCOffset(date, timeZone)\n  offset = date.getTimezoneOffset() - offset\n  return new Date(date.getTime() - offset * 60 * 1000)\n}\n\nexport { convertToLocalTime }\n","/** @module date-fns */\n\nimport parse from 'date-fns/parse'\nimport { findTimeZone, getUTCOffset } from 'timezone-support'\n\n/**\n * @category Common Helpers\n * @summary Convert the date from the local time to the given time zone.\n *\n * @description\n * Converts the given date from the local time to the given time zone and returns a new `Date` object, which has its local time set to it.\n * The returned `Date` object should not be used form comparisons or other computations. Only the its getters for the\n * local time parts can be used (getFullYear, getMonth, ...).\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} options - the object with options\n * @param {String} options.timeZone - the canonical name of the target time zone\n * @returns {Date} the parsed date in the target time zone\n *\n * @example\n * // Convert the current local time to the New York time zone:\n * const result = convertToTimeZone(new Date(), { timeZone: 'America/New_York' })\n * Returns { date: Date, zone: { abbreviation: 'EST', offset: -300 }\n */\nfunction convertToTimeZone (argument, options) {\n  let date = parse(argument)\n  const timeZone = findTimeZone(options.timeZone)\n  let { offset } = getUTCOffset(date, timeZone)\n  offset -= date.getTimezoneOffset()\n  return new Date(date.getTime() - offset * 60 * 1000)\n}\n\nexport { convertToTimeZone }\n","/** @module date-fns */\n\nimport { parseZonedTime } from 'timezone-support/dist/parse-format'\nimport { convertTimeToDate } from 'timezone-support/dist/lookup-convert'\n\n/**\n * @category Common Helpers\n * @summary Parse the date string and convert it to the local time.\n *\n * @description\n * Returns the date parsed from the date string using the given format string and converts the parsed date to the local time.\n *\n * The following tokens are recognized in the format string:\n *\n * | Token  | Input example    | Description                       |\n * |--------|------------------|-----------------------------------|\n * | `YY`   | 18               | Two-digit year                    |\n * | `YYYY` | 2018             | Four-digit year                   |\n * | `M`    | 1-12             | Month, beginning at 1             |\n * | `MM`   | 01-12            | Month, 2-digits                   |\n * | `D`    | 1-31             | Day of month                      |\n * | `DD`   | 01-31            | Day of month, 2-digits            |\n * | `H`    | 0-23             | Hours                             |\n * | `HH`   | 00-23            | Hours, 2-digits                   |\n * | `h`    | 1-12             | Hours, 12-hour clock              |\n * | `hh`   | 01-12            | Hours, 12-hour clock, 2-digits    |\n * | `m`    | 0-59             | Minutes                           |\n * | `mm`   | 00-59            | Minutes, 2-digits                 |\n * | `s`    | 0-59             | Seconds                           |\n * | `ss`   | 00-59            | Seconds, 2-digits                 |\n * | `S`    | 0-9              | Hundreds of milliseconds, 1-digit |\n * | `SS`   | 00-99            | Tens of milliseconds, 2-digits    |\n * | `SSS`  | 000-999          | Milliseconds, 3-digits            |\n * | `z`    | EST              | Time zone abbreviation            |\n * | `Z`    | -5:00            | Offset from UTC, 2-digits         |\n * | `ZZ`   | -0500            | Compact offset from UTC, 2-digits |\n * | `A`    | AM PM            | Post or ante meridiem, upper-case |\n * | `a`    | am pm            | Post or ante meridiem, lower-case |\n *\n * To escape characters in the format string, wrap them in square brackets (e.g. `[G]`). Punctuation symbols (-:/.()) do not need to be wrapped.\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the custom format to parse the date from\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Parse string '11.2.2014 11:30:30' to date in Berlin:\n * const result = parseFromTimeZone('11.2.2014 11:30:30', 'D.M.YYYY H:mm:ss')\n * // Returns Tue Feb 11 2014 10:30:30 UTC\n *\n * @example\n * // Parse string '02/11/2014 11:30:30' to date, New York time:\n * const result = parseFromString('02/11/2014 11:30:30 AM GMT-0500 (EDT)',\n *   'MM/DD/YYYY h:mm:ss.SSS A [GMT]ZZ (z)')\n * // Returns Tue Feb 11 2014 16:30:30 UTC\n */\nfunction parseFromString (dateString, formatString) {\n  const time = parseZonedTime(dateString, formatString)\n  return convertTimeToDate(time)\n}\n\nexport { parseFromString }\n","/** @module date-fns */\n\nimport parse from 'date-fns/parse'\nimport { findTimeZone, getUTCOffset, getUnixTime } from 'timezone-support'\nimport { parseZonedTime } from 'timezone-support/dist/parse-format'\n\n/**\n * @category Common Helpers\n * @summary Parse the date string and convert it from the specified time zone to the local time.\n *\n * @description\n * Returns the date parsed from the date string, optionally using the given format string, and convert the parsed date from the given time zone to the local time.\n *\n * If the format string is omitted, the date string will be parsed by `date-fns/parse`, which supports extended ISO 8601 formats.\n *\n * The following tokens are recognized in the format string:\n *\n * | Token  | Input example    | Description                       |\n * |--------|------------------|-----------------------------------|\n * | `YY`   | 18               | Two-digit year                    |\n * | `YYYY` | 2018             | Four-digit year                   |\n * | `M`    | 1-12             | Month, beginning at 1             |\n * | `MM`   | 01-12            | Month, 2-digits                   |\n * | `D`    | 1-31             | Day of month                      |\n * | `DD`   | 01-31            | Day of month, 2-digits            |\n * | `H`    | 0-23             | Hours                             |\n * | `HH`   | 00-23            | Hours, 2-digits                   |\n * | `h`    | 1-12             | Hours, 12-hour clock              |\n * | `hh`   | 01-12            | Hours, 12-hour clock, 2-digits    |\n * | `m`    | 0-59             | Minutes                           |\n * | `mm`   | 00-59            | Minutes, 2-digits                 |\n * | `s`    | 0-59             | Seconds                           |\n * | `ss`   | 00-59            | Seconds, 2-digits                 |\n * | `S`    | 0-9              | Hundreds of milliseconds, 1-digit |\n * | `SS`   | 00-99            | Tens of milliseconds, 2-digits    |\n * | `SSS`  | 000-999          | Milliseconds, 3-digits            |\n * | `z`    | EST              | Time zone abbreviation            |\n * | `Z`    | -5:00            | Offset from UTC, 2-digits         |\n * | `ZZ`   | -0500            | Compact offset from UTC, 2-digits |\n * | `A`    | AM PM            | Post or ante meridiem, upper-case |\n * | `a`    | am pm            | Post or ante meridiem, lower-case |\n *\n * To escape characters in the format string, wrap them in square brackets (e.g. `[G]`). Punctuation symbols (-:/.()) do not need to be wrapped.\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * @param {String} dateString - the string to parse\n * @param {String} [formatString] - the custom format to parse the date from\n * @param {Object} options - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} options.timeZone - the canonical name of the source time zone\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Parse string '2014-02-11 11:30:30 AM' to date, New York time:\n * const result = parseFromTimeZone('2014-02-11 11:30:30',\n *   { timeZone: 'America/New_York' })\n * // Returns Tue Feb 11 2014 16:30:30 UTC\n *\n * @example\n * // Parse string '11.2.2014 11:30:30' to date, Berlin time:\n * const result = parseFromTimeZone('11.2.2014 11:30:30',\n *   'D.M.YYYY H:mm:ss', { timeZone: 'Europe/Berlin' })\n * // Returns Tue Feb 11 2014 10:30:30 UTC\n *\n * @example\n * // Parse string '+02014101', if the additional number of digits\n * // in the extended year format is 1, Madrid time:\n * var result = parseFromTimeZone('+02014101',\n *   { additionalDigits: 1, timeZone: 'Europe/Madrid' })\n * //=> Fri Apr 10 2014 22:00:00 UTC\n */\nfunction parseFromTimeZone (dateString, formatString, options) {\n  if (typeof formatString !== 'string') {\n    options = formatString\n    formatString = undefined\n  }\n  let { timeZone } = options\n  timeZone = findTimeZone(timeZone)\n  if (formatString) {\n    const time = parseZonedTime(dateString, formatString)\n    const unixTime = getUnixTime(time, timeZone)\n    return new Date(unixTime)\n  }\n  const date = parse(dateString, options)\n  let { offset } = getUTCOffset(date, timeZone)\n  offset -= date.getTimezoneOffset()\n  return new Date(date.getTime() + offset * 60 * 1000)\n}\n\nexport { parseFromTimeZone }\n"],"names":["padToTwoDigits","number","formatTimeZoneOffset","offset","separator","Math","floor","argument","options","date","parse","timeZone","findTimeZone","getUTCOffset","getTimezoneOffset","Date","getTime","dateString","formatString","time","parseZonedTime","convertTimeToDate","undefined","unixTime","getUnixTime","parseDate","convertTimeZone","replace","match","abbreviation","formatDate"],"mappings":"klBAiHA,SAASA,EAAgBC,UACP,EAATA,EAAaA,MAAaA,EAGnC,SAASC,EAAsBC,EAAQC,UAEjCD,GAAU,GACZA,GAAUA,EACH,KAEA,KAEKH,EAAeK,KAAKC,MAAMH,EAAS,KAE3BC,EADNJ,EAAeG,EAAS,mHClG1C,SAA6BI,EAAUC,OACjCC,EAAOC,EAAMH,GACXI,EAAWC,eAAaJ,EAAQG,UAChCR,EAAWU,eAAaJ,EAAME,GAA9BR,cACNA,EAASM,EAAKK,oBAAsBX,EAC7B,IAAIY,KAAKN,EAAKO,UAAqB,GAATb,EAAc,0BCPjD,SAA4BI,EAAUC,OAChCC,EAAOC,EAAMH,GACXI,EAAWC,eAAaJ,EAAQG,UAChCR,EAAWU,eAAaJ,EAAME,GAA9BR,cACNA,GAAUM,EAAKK,oBACR,IAAIC,KAAKN,EAAKO,UAAqB,GAATb,EAAc,wBCyBjD,SAA0Bc,EAAYC,OAC9BC,EAAOC,iBAAeH,EAAYC,UACjCG,oBAAkBF,wBCc3B,SAA4BF,EAAYC,EAAcV,GACxB,iBAAjBU,IACTV,EAAUU,EACVA,OAAeI,OAEXX,EAAaH,EAAbG,YACNA,EAAWC,eAAaD,GACpBO,EAAc,KACVC,EAAOC,iBAAeH,EAAYC,GAClCK,EAAWC,cAAYL,EAAMR,UAC5B,IAAII,KAAKQ,OAEZd,EAAOC,EAAMO,EAAYT,GACzBL,EAAWU,eAAaJ,EAAME,GAA9BR,cACNA,GAAUM,EAAKK,oBACR,IAAIC,KAAKN,EAAKO,UAAqB,GAATb,EAAc,yBJajD,SAA2BI,EAAUW,EAAcV,OA8BZG,EA7BjCF,EAAOgB,EAAUlB,GACfI,EAA8BH,EAA9BG,SAAUe,EAAoBlB,EAApBkB,mBAChBf,EAAWC,eAAaD,GACxBA,EAAWE,eAAaJ,EAAME,IACN,IAApBe,EAA2B,KACvBvB,EAASQ,EAASR,OAASM,EAAKK,oBACtCL,EAAO,IAAIM,KAAKN,EAAKO,UAAqB,GAATb,EAAc,YAuBZQ,EArBaA,EAAlDO,EAAoCA,EAsBtBS,QAAQ,SAAU,SAAAC,UACtBA,OACD,cACQjB,EAASkB,qBACjB,WACI3B,EAAqBS,EAASR,OAAQ,oBAEtCD,EAAqBS,EAASR,OAAQ,OA5B5C2B,EAAWrB,EAAMS,EAAcV"}